---
/* src/components/FlavoursCarousel.astro */
const flavours = [
  { name: "Passion Fruit", tag: "Tropical", slug: "passion-fruit", img: "/images/bonbons/passion-fruit.jpg",
    desc: "Real passion fruit purée in silky ganache. Bright, tart, clean finish." },
  { name: "Colombian Coffee", tag: "Colombian", slug: "colombian-coffee", img: "/images/bonbons/colombian-coffee.jpg",
    desc: "Arabica extraction folded into dark ganache. Bold and aromatic." },
  { name: "Chocolate & Hazelnut", tag: "Classic", slug: "chocolate-hazelnut", img: "/images/bonbons/choc-hazelnut.jpg",
    desc: "House hazelnut praliné with Colombian chocolate. Deep and elegant." },
  { name: "Pistachio", tag: "Nutty", slug: "pistachio", img: "/images/bonbons/pistachio.jpg",
    desc: "Pure pistachio paste in white chocolate. Silky, nut-forward." },
  { name: "Dulce de Leche", tag: "Caramelized", slug: "dulce-de-leche", img: "/images/bonbons/dulce-de-leche.jpg",
    desc: "Slow-cooked milk caramel. Creamy texture; gentle sweetness." },
];
---

<section id="flavours" class="relative bg-[#0A0B0D] text-slate-50 scroll-mt-[84px] sm:scroll-mt-[84px] py-8 sm:py-10 lg:py-12">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <header class="mx-auto max-w-2xl text-center mb-6 sm:mb-10">
      <h2 class="font-serif font-bold leading-tight text-[1.75rem] sm:text-[2.1rem] lg:text-[2.6rem]">
        Our <span class="bg-gradient-to-br from-[#D4A373] to-[#F59E0B] bg-clip-text text-transparent">Signature Fillings</span>
      </h2>
      <p class="mt-2 text-[0.95rem] leading-relaxed text-slate-300">
        Five hand-painted bonbon fillings. Image-forward, concise copy.
      </p>
    </header>

    <!-- Carrusel -->
    <div class="relative">
      <!-- Flechas (ocultas en xs; visibles desde sm) -->
      <button id="prevBtn" aria-label="Previous" aria-controls="rail"
        class="hidden sm:grid place-items-center absolute top-1/2 -translate-y-1/2 left-2 h-10 w-10 rounded-full
               border border-amber-500/30 bg-amber-500/10 text-amber-400 backdrop-blur z-20
               hover:bg-amber-500/20 disabled:opacity-40 disabled:pointer-events-none">
        <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="15 18 9 12 15 6"/></svg>
      </button>
      <button id="nextBtn" aria-label="Next" aria-controls="rail"
        class="hidden sm:grid place-items-center absolute top-1/2 -translate-y-1/2 right-2 h-10 w-10 rounded-full
               border border-amber-500/30 bg-amber-500/10 text-amber-400 backdrop-blur z-20
               hover:bg-amber-500/20 disabled:opacity-40 disabled:pointer-events-none">
        <svg width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="9 6 15 12 9 18"/></svg>
      </button>

      <!-- Fades laterales -->
      <div class="pointer-events-none absolute inset-y-0 left-0 w-8 sm:w-10 bg-gradient-to-r from-[#0A0B0D] to-transparent z-10"></div>
      <div class="pointer-events-none absolute inset-y-0 right-0 w-8 sm:w-10 bg-gradient-to-l from-[#0A0B0D] to-transparent z-10"></div>

      <!-- Rail -->
      <div id="rail"
           class="flex gap-3 sm:gap-4 overflow-x-auto overflow-y-hidden px-1 scroll-smooth snap-x snap-mandatory
                  [-webkit-overflow-scrolling:touch] scrollbar-thin
                  [scrollbar-color:rgba(212,163,115,.55)_transparent]"
           tabindex="0" role="region" aria-roledescription="carousel" aria-label="Signature fillings carousel">
        {flavours.map((f, i) => (
          <article
            class="group relative flex flex-none flex-col overflow-hidden rounded-2xl border border-amber-500/15
                   bg-slate-900/60 backdrop-blur snap-start focus-within:ring-2 focus-within:ring-amber-400/60
                   min-w-[92%] xs:min-w-[88%] sm:min-w-[72%] md:min-w-[58%] lg:min-w-[44%] xl:min-w-[32%] 2xl:min-w-[28%]">
            <!-- media -->
            <figure class="relative w-full overflow-hidden border-b border-amber-500/10">
              <picture>
                <source srcset={f.img.replace(".jpg", ".avif")} type="image/avif" />
                <source srcset={f.img.replace(".jpg", ".webp")} type="image/webp" />
                <img
                  src={f.img}
                  alt={`${f.name} bonbon`}
                  loading="lazy" decoding="async" width="1200" height="800"
                  class="w-full object-cover transition-transform duration-700 ease-out group-hover:scale-[1.04]
                         h-[clamp(220px,42vh,360px)] sm:h-[clamp(240px,40vh,380px)] md:h-[clamp(260px,36vh,420px)]
                         lg:h-[clamp(240px,32vh,380px)] xl:h-[clamp(220px,30vh,360px)]" />
              </picture>
              <figcaption class="pointer-events-none absolute inset-0 flex items-start justify-end p-2">
                <span class="pointer-events-auto select-none rounded-full bg-gradient-to-br from-amber-400 to-amber-600
                               px-2.5 py-1 text-[0.72rem] font-bold text-slate-900 shadow-sm">
                  {f.tag}
                </span>
              </figcaption>
            </figure>

            <!-- copy -->
            <div class="grid gap-1.5 p-3 sm:p-4">
              <h3 class="font-serif text-[1.05rem] sm:text-[1.15rem] leading-tight">{f.name}</h3>
              <p class="text-[0.93rem] sm:text-[0.97rem] leading-snug text-slate-300">{f.desc}</p>
              <a href={`/product/${f.slug}`} class="mt-1 inline-flex items-center gap-2 text-amber-300 hover:text-amber-200">
                View details
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M5 12h14M12 5l7 7-7 7"/></svg>
              </a>
            </div>
          </article>
        ))}
      </div>

      <!-- Dots -->
      <div id="dots" class="mt-3 flex justify-center gap-2" role="tablist" aria-label="Carousel pagination">
        {flavours.map((_, i) => (
          <button class={"h-2.5 w-2.5 rounded-full bg-amber-500/40 transition-all " + (i === 0 ? "scale-110 bg-amber-500" : "")}
                  data-i={i} role="tab" aria-selected={i === 0 ? "true" : "false"} aria-controls="rail"
                  aria-label={`Go to slide ${i + 1}`} />
        ))}
      </div>
    </div>
  </div>
</section>

<script is:inline>
  const rail = document.getElementById('rail');
  const prev = document.getElementById('prevBtn');
  const next = document.getElementById('nextBtn');
  const dotsEl = document.getElementById('dots');
  const dots = Array.from(dotsEl?.querySelectorAll('button') || []);

  const getStep = () => {
    const card = rail?.querySelector('article');
    if (!rail || !card) return 0;
    const gap = parseFloat(getComputedStyle(rail).gap || '0');
    return card.getBoundingClientRect().width + gap;
  };

  const clamp = (n, min, max) => Math.max(min, Math.min(max, n));
  const go = (dir) => rail.scrollBy({ left: (getStep() || rail.clientWidth) * dir, behavior: 'smooth' });

  function updateUI(){
    const total = Math.max(0, (rail?.children.length || 1) - 1);
    const step = getStep() || 1;
    const i = clamp(Math.round(rail.scrollLeft / step), 0, total);
    dots.forEach((d,k) => {
      const on = k === i;
      d.style.transform = on ? 'scale(1.1)' : '';
      d.style.background = on ? '#F59E0B' : 'rgba(245,158,11,.4)';
      d.setAttribute('aria-selected', on ? 'true' : 'false');
    });
    if (prev && next) {
      prev.disabled = rail.scrollLeft <= 1;
      next.disabled = rail.scrollLeft + rail.clientWidth >= rail.scrollWidth - 1;
    }
  }

  prev?.addEventListener('click', () => go(-1));
  next?.addEventListener('click', () => go(1));
  rail?.addEventListener('scroll', () => requestAnimationFrame(updateUI));
  window.addEventListener('resize', updateUI);

  dots.forEach((d, k) => d.addEventListener('click', () => {
    const step = getStep() || rail.clientWidth;
    rail.scrollTo({ left: k * step, behavior: 'smooth' });
  }));

  // teclado
  rail?.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight') { e.preventDefault(); go(1); }
    if (e.key === 'ArrowLeft')  { e.preventDefault(); go(-1); }
  });

  // reflow en cambios de layout
  if ('ResizeObserver' in window && rail){
    const ro = new ResizeObserver(updateUI);
    ro.observe(rail);
    Array.from(rail.children).forEach(el => ro.observe(el));
  }
  updateUI();
</script>

<style>
/* Scrollbar webkit (ya definimos para Firefox con scrollbar-color arriba) */
#rail::-webkit-scrollbar{ height:10px }
#rail::-webkit-scrollbar-track{
  background: linear-gradient(to right, rgba(212,163,115,.06), rgba(212,163,115,0));
  border-radius:999px
}
#rail::-webkit-scrollbar-thumb{
  background: linear-gradient(135deg, #D4A373, #F59E0B);
  border-radius:999px; border:2px solid rgba(12,13,15,.6)
}
#rail::-webkit-scrollbar-thumb:hover{ filter:brightness(1.05) }
</style>
